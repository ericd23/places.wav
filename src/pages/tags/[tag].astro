---
import Layout from '../../layouts/Layout.astro';
import CollectionGrid from '../../components/CollectionGrid.astro';
import { getCollection } from 'astro:content';

export async function getStaticPaths() {
  const mixes = await getCollection('mixes');
  const conversations = await getCollection('conversations');
  const archives = await getCollection('archive');
  
  // Collect all unique tags
  const allTags = new Set();
  
  [...mixes, ...conversations, ...archives].forEach(item => {
    if (item.data.tags) {
      item.data.tags.forEach(tag => allTags.add(tag));
    }
  });
  
  return Array.from(allTags).map(tag => ({
    params: { tag },
    props: {
      tag,
      mixes: mixes.filter(mix => mix.data.tags?.includes(tag)),
      conversations: conversations.filter(convo => convo.data.tags?.includes(tag)),
      archives: archives.filter(archive => archive.data.tags?.includes(tag))
    }
  }));
}

const { tag, mixes, conversations, archives } = Astro.props;
const totalCount = mixes.length + conversations.length + archives.length;
---

<Layout title={`Tag: ${tag} - Places`} variant="wide">
    <header class="mb-8">
      <h1 class="text-2xl mb-2">#{tag}</h1>
      <p class="text-sm text-gray-700">
        {totalCount} item{totalCount !== 1 ? 's' : ''} tagged with "{tag}"
      </p>
    </header>

    <div class="space-y-12">
      {mixes.length > 0 && (
        <section>
          <CollectionGrid items={mixes} collection="mixes" showCount={true} currentTag={tag} />
        </section>
      )}

      {conversations.length > 0 && (
        <section>
          <CollectionGrid items={conversations} collection="conversations" showCount={true} currentTag={tag} />
        </section>
      )}

      {archives.length > 0 && (
        <section>
          <CollectionGrid items={archives} collection="archive" showCount={true} currentTag={tag} />
        </section>
      )}
    </div>

    {totalCount === 0 && (
      <p class="text-gray-500 text-sm">No content found with this tag.</p>
    )}
</Layout>