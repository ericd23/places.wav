---
import Layout from '../../layouts/Layout.astro';
import { getCollection } from 'astro:content';

// Get all content and collect tag statistics
const mixes = await getCollection('mixes');
const conversations = await getCollection('conversations');
const archives = await getCollection('archive');

// Count occurrences of each tag
const tagCounts = new Map();

[...mixes, ...conversations, ...archives].forEach(item => {
  if (item.data.tags) {
    item.data.tags.forEach(tag => {
      tagCounts.set(tag, (tagCounts.get(tag) || 0) + 1);
    });
  }
});

// Sort tags by count (descending) then alphabetically
const sortedTags = Array.from(tagCounts.entries())
  .sort(([a, countA], [b, countB]) => {
    if (countB !== countA) return countB - countA;
    return a.localeCompare(b);
  });

const totalTags = sortedTags.length;
const totalTaggedItems = Array.from(tagCounts.values()).reduce((sum, count) => sum + count, 0);
---

<Layout title="Tags - Places" variant="wide">
    <header class="mb-8">
      <h1 class="text-2xl mb-2">Tags</h1>
      <p class="text-sm text-gray-700">
        {totalTags} tag{totalTags !== 1 ? 's' : ''} across {totalTaggedItems} tagged item{totalTaggedItems !== 1 ? 's' : ''}
      </p>
    </header>

    {sortedTags.length > 0 ? (
      <div class="flex flex-wrap gap-x-4 gap-y-2">
        {sortedTags.map(([tag, count]) => (
          <a 
            href={`/tag/${tag}`} 
            class="text-sm hover:text-gray-700 transition-colors"
          >
            #{tag} ({count})
          </a>
        ))}
      </div>
    ) : (
      <p class="text-gray-500 text-sm">No tags found.</p>
    )}

</Layout>